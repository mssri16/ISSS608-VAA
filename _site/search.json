[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if tidyverse packages are installed in the computer. If they are, then they will be launched into R.\n\npacman::p_load(tidyverse)\n\n\n\n\n\nexam_data <- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex03/In-Class_Ex03.html",
    "href": "In-Class_Ex/In-Class_Ex03/In-Class_Ex03.html",
    "title": "In-Class_Ex03",
    "section": "",
    "text": "---\nInstalling and loading R packages\nTwo packages will be installed and loaded. They are tidyverse and ggiraph.\n\npacman::p_load(ggiraph,tidyverse)\n\nImporting data\n\nexam_data <- read_csv(\"data/Exam_data.csv\")\n\n\nggplot(data = exam_data,aes(x=MATHS)) + geom_histogram(bins = 10,boundary=100)"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex04/In-Class_Ex04.html",
    "href": "In-Class_Ex/In-Class_Ex04/In-Class_Ex04.html",
    "title": "In-Class_Ex04",
    "section": "",
    "text": "pacman::p_load(plotly,DT,patchwork,tidyverse,ggstatsplot)\n\n\nexam_data <- read_csv(\"data/Exam_data.csv\")\n\n\nplot_ly(data = exam_data, \n             x = ~MATHS, \n             y = ~ENGLISH,\n             color = ~RACE) #<<\n\n\n\n\n\n\np <- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point() +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\nggplotly(p)\n\n\n\n\n\n\nggbetweenstats(\n  data = exam_data,\n  x = GENDER, \n  y = MATHS,\n  type = \"np\",\n  messages = FALSE\n)\n\n\n\n\n\nggscatterstats(\n  data = exam_data,\n  x = MATHS,\n  y = ENGLISH,\n  marginal = FALSE,\n  )\n\n\n\n\n\n#car_resale <- read_xls(\"data/ToyotaCorolla.xls\")"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex05/In-Class_Ex05.html",
    "href": "In-Class_Ex/In-Class_Ex05/In-Class_Ex05.html",
    "title": "In-Class_Ex05",
    "section": "",
    "text": "pacman::p_load(corrplot, ggstatsplot, tidyverse)\n\n\nwine <- read_csv(\"data/wine_quality.csv\")\n\n\nggstatsplot::ggcorrmat(\n  data = wine, \n  cor.vars = 1:11)\n\n\n\n\n\nggstatsplot::ggcorrmat(\n  data = wine, \n  cor.vars = 1:11,\n  ggcorrplot.args = list(outline.color = \"black\", \n                         hc.order = TRUE,\n                         tl.cex = 10),\n  title    = \"Correlogram for wine dataset\",\n  subtitle = \"Four pairs are no significant at p < 0.05\"\n)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS608-VAA",
    "section": "",
    "text": "Welcome to ISSS608 Visual Analytics and Applications Homepage. In this website, you will find my coursework prepared for this course."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html",
    "title": "Take-Home_Ex01",
    "section": "",
    "text": "Singapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2022 is used to prepare the analytical visualization. It is available at Department of Statistics, Singapore(in short SingStat).\nThe data consists of the following,\n\n\n\n#\nColumn Name\nColumn Description\n\n\n\n\n1\nPA\nPlanning Area\n\n\n2\nSZ\nSubzone\n\n\n3\nAG\nAge Group\n\n\n4\nSex\nSex\n\n\n5\nTOD\nType of Dwelling\n\n\n6\nPop\nResident Count\n\n\n7\nTime\nTime / Period\n\n\n\n\n\n\nTo visualize the provided data in Age-sex pyramid, which is an analytical visualization commonly used by demographers to reveal the structure of population by gender and age group, to reveal the demographic structure of Singapore at planning area level by using age-sex pyramid method.\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo.\nInstruction\nScreenshot\n\n\n\n\n1\nLoad the downloaded .csv file to Tableau using Connect To a File option. Click More under To a File option and load the data.\n\n\n\n2.\nThe loaded file will look like in the given screenshot.\n\n\n\n3\nThe column headers are renamed to readable names for better visualization.\n\n\n\n4\nCreate a new group column for Age group with 10 years as an interval.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo.\nInstruction\nScreenshot\n\n\n\n\n1.\nCreate a new worksheet and load the data by Age group and Sex as shown in the screenshot.\n\n\n\n2.\nCreate a new worksheet. Create a new calculated field for Female and Male population separately.\n\n\n\n3.\nAfter loading the Male population to the columns and the Age group to rows, right click on the x axis and select edit axis. Click on the checkbox Reversed and close the dialog box.\n\n\n\n4.\nThe next step is to visualize the overall population by Age group and Sex in the form of a Age-Pyramid chart. The left side of the chart denotes the male population, while the right side denotes the female population.\n\n\n\n5.\nCreate a new worksheet to load the text table of the Singapore population by planning area and sex.\n\n\n\n6.\nBefore proceeding to the next step, click on the arrow button and select Create Calculated Field option. Enter the following formula for columns and rows separately.\nColumns: (INDEX()-1)%(ROUND(SQRT(SIZE())))\nRows: INT((INDEX()-1)/(ROUND(SQRT(SIZE()))))\n\n\n\n7\nRight click on the new Column and Row and select the option Convert to Discrete as shown in the screenshot.\n\n\n\n8\nIn order to create a trellis chart, load Columns and Rows to their respective name tags in tableau worksheet.\n\n\n\n9\nSelect the arrow button on the Columns and select Edit Table Calculation, and select Planning Area checkbox under Compute using. Repeat the same for Rows as well. This will enable us to create a trellis chart by top 9 highest population by planning areas.\n\n\n\n10\nRepeat the same steps performed in 3 and 4 to create an Age pyramid chart.\n\n\n\n11\nSelect the Planning Area column and enable the option Show mark labels to view the planning area names on the trellis age pyramid chart.\n\n\n\n12\nCreate a new Dashboard and load the text table and the trellis age pyramid chart created. Adjust the size and select Automatic under Size in the left side pane.\n\n\n\n\n\n\n\n\n\nBirth rate or Fertility late is low. In all the top 9 populated planning areas the bars in the lower region of the graph is smaller compared to the other bars above them. This indicates that the birth rate/fertility rate is low in all these places. This type of pyramid is called as constrictive pyramid, which indicates decline in population. In other words this can also be called as a negative growth in the population. Unless the population starts reproducing, the country will have a demographic emergency.\nBars of age groups from 20 to 40 is higher than 0 to 20. Age groups between 20 and 40 has a higher width. This suggests that there are a lot of foreigners/immigrants who are in Singapore for higher studies or work.\nVery high population for Age group from 50 to 70. Among most of the graphs the number of people falling under the age category between 50 and 70 is very high. This suggests that there are a lot more elderly people in Singapore compared to other age groups. This usually occurs in a developed country where there is very good health care and very high level of education.\nMale population higher than female population. By comparing the individual age groups in the top 9 populated planning areas of Singapore, most of the graphs follow the same trend where the male population is higher than the female population."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html",
    "title": "Take-Home_Ex02",
    "section": "",
    "text": "This take-home exercise is done based on a take-home exercise 1 submission prepared by a classmate. The peer submission will be critiqued in terms of clarity and aesthetics, and the original design will be remade using the data visualization principles and best practices learned in Lessons 1 and 2.\nThe dataset used in take-home exercise 1 is downloaded from Singapore Residents by Planning Area / Subzone, Age Group, Sex, and Type of Dwelin ling June 2022, from Singstat and processed by RStudio tidyverse family of packages and visualized by ggplot2 and its extensions."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#critique",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#critique",
    "title": "Take-Home_Ex02",
    "section": "Critique",
    "text": "Critique\n\nThe Age Pyramid chart design is not clear in what the whole visualization is trying to communicate.\nThe heading of the graph should convey the purpose of the visualization of the data.\nThe heading can be renamed as Top 9 Highest Population or Bottom 9 Highest Population of Singapore, by configuring the data."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#aesthetics",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#aesthetics",
    "title": "Take-Home_Ex02",
    "section": "Aesthetics",
    "text": "Aesthetics\n\nThe chosen colors to depict the male and female population is apt for the purports\nIt’s not advisable to display the label of the value individual bars on the pyramid chart."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#data-preparation",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#data-preparation",
    "title": "Take-Home_Ex02",
    "section": "Data Preparation",
    "text": "Data Preparation\n\nThe first step is to load the necessary packages.\n\npacman::p_load(ggiraph, tidyverse)\n\nLoad the CSV file.\n\ndata <- read_csv(\"Data/respopagesextod2022.csv\")\n\nRegroup the ‘AgeGroup’ column from 5 years interval to 10 years interval.\n\ndata <- data %>%\n  mutate(AgeGroup= ifelse(AG=='0_to_4'|AG=='5_to_9', '0-9', AG)) %>%\n  mutate(AgeGroup= ifelse(AG=='10_to_14'|AG=='15_to_19', '10-19', AgeGroup)) %>%\n  mutate(AgeGroup= ifelse(AG=='20_to_24'|AG=='25_to_29', '20-29', AgeGroup)) %>%\n  mutate(AgeGroup= ifelse(AG=='30_to_34'|AG=='35_to_39', '30-39', AgeGroup)) %>%\n  mutate(AgeGroup= ifelse(AG=='40_to_44'|AG=='45_to_49', '40-49', AgeGroup)) %>%\n  mutate(AgeGroup= ifelse(AG=='50_to_54'|AG=='55_to_59', '50-59', AgeGroup)) %>%\n  mutate(AgeGroup= ifelse(AG=='60_to_64'|AG=='65_to_69', '60-69', AgeGroup)) %>%\n  mutate(AgeGroup= ifelse(AG=='70_to_74'|AG=='75_to_79', '70-79', AgeGroup)) %>%\n  mutate(AgeGroup= ifelse(AG=='80_to_84'|AG=='85_to_89', '80-89', AgeGroup))\n\nFilter and group the data to have the top 9 highest-populated planning areas in Singapore.\n\ngrouped_data <- data %>%\n  select(PA,AgeGroup, Sex, Pop) %>%\n  group_by(PA) %>%\n  summarise(Population = sum(Pop)) %>%\n  arrange(desc(Population))\n\ngrouped_data <- grouped_data[1:9,]\ntop_PA <- grouped_data[['PA']]\n\nFetch the resultant data frame that contains the required details grouped accordingly.\n\ntop_pop_data <- data %>%\n  select(PA, AgeGroup, Sex, Pop) %>%\n  filter(PA %in% top_PA) %>%\n  group_by(PA, AgeGroup, Sex) %>%\n  summarise(Population = sum(Pop)) %>%\n  mutate(Population = ifelse(Sex=='Females', Population, Population*-1)) %>%\n  arrange(desc(AgeGroup))"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#plot-the-clean-data",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#plot-the-clean-data",
    "title": "Take-Home_Ex02",
    "section": "Plot the clean data",
    "text": "Plot the clean data\nThe data is plotted and visually represented in the form of an age pyramid chart. To achieve this, ggplot2 is used. Geom_col_interactive is used to show the pyramid chart, in which the exact values can be seen by hovering over the bars.\n\npyramid <- ggplot(data=top_pop_data, aes(y=AgeGroup, x=Population)) + geom_col_interactive(stat = \"identity\", aes(fill=Sex, tooltip=paste(\n  paste(\"Age Group:   \", AgeGroup), \n  paste(\"Planning Area:   \", PA), \n  paste(\"Sex:   \", Sex), \n  paste(\"Population:   \", ifelse(Sex=='Males', Population*-1, Population)), \n  sep = \"\\n\" \n  ))) + \n  scale_fill_manual(values=c(\"Males\" = \"#6CA8E8\", \"Females\" = \"#F987B1\")) + \n  scale_x_continuous(breaks = c(-20000, -10000, 0, 10000, 20000),\n                     labels = c(\"20k\", \"10k \\nMale\", \"0\", \"10k \\nFemale\", \"20k\")) +\n  ggtitle(label = \"Singapore Residents by Planning Area, Age Group, Sex June 2022\", subtitle = \"Top 9 Highest Population By Planning Area, Singapore\") + \n  facet_wrap(~ PA) + theme(legend.position = \"none\", plot.title = element_text(size=26, face = \"bold\", hjust = 0.9), plot.subtitle = element_text(size=20, hjust = 0.5))\ngirafe(\n  ggobj = pyramid,\n  width_svg = 12,\n  height_svg = 12*0.618\n)"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html",
    "href": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html",
    "title": "Take-Home_Ex03",
    "section": "",
    "text": "The objective is to uncover the salient patterns of the resale prices of public housing property by residential towns and estates in Singapore by using appropriate analytical visualization techniques.\nThe primary focus is on 3-ROOM, 4-ROOM, and 5-ROOM types for the period 2022."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#data-preparation",
    "href": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#data-preparation",
    "title": "Take-Home_Ex03",
    "section": "Data Preparation",
    "text": "Data Preparation\n\nLoading the packages\nThe required packages are loaded for the purpose of visualization.\n\npacman::p_load(ggstatsplot, plotly, crosstalk, DT, ggdist, gganimate, FunnelPlotR, knitr, gifski, tidyverse)\n\n\n\nLoading the data\nLoad the downloaded data from Data.gov.sg.\n\nflats_data <- read_csv(\"data/resale-flat-prices-based-on-registration-date-from-jan-2017-onwards.csv\")\n\n\n\nFilter the data\nFilter the data for the year 2022 and flat type 3 Room, 4 Room, and 5 Room.\n\nfiltered_flats_data <- filter(flats_data, grepl('2022', month) & flat_type %in% c(\"3 ROOM\", \"4 ROOM\",\"5 ROOM\"))\n\nAfter exploring the data, it was discovered that the columns storey_range and remaining_lease requires the necessary change.\n\n\nChange the order of the storey_range\nChange the order of the storey_range,\n\nstorey_order <- c(\"01 TO 03\", \"04 TO 06\", \"07 TO 09\", \"10 TO 12\", \"13 TO 15\", \"16 TO 18\", \"19 TO 21\", \"22 TO 24\", \"25 TO 27\", \"28 TO 30\", \"31 TO 33\", \"34 TO 36\", \"37 TO 39\", \"40 TO 42\", \"43 TO 45\", \"46 TO 48\", \"49 TO 51\")  \n\nupdated_flat_data <- filtered_flats_data %>%\n  mutate (storey_range = factor(storey_range, levels = storey_order)) %>%\n  ungroup()\n\n\n\nChange the type of remaining_lease\nChange the type of remaining_lease from string to integer,\n\nupdated_flat_data$remaining_lease_int <- as.numeric(gsub(\"([0-9]+).*$\", \"\\\\1\", filtered_flats_data$remaining_lease))"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#data-visualization",
    "href": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#data-visualization",
    "title": "Take-Home_Ex03",
    "section": "Data Visualization",
    "text": "Data Visualization\nNow we will be exploring the data visually,\n\nDistribution of storey_range\n\nggplot(data = updated_flat_data,\n       aes(y = storey_range)) +\n  geom_bar() \n\n\n\n\nFrom the above graph, it can be observed that storey_range from 01 TO 30 have the majority of the flats in Singapore, 2022.\n\n\nOne-way ANOVA flat_type and resale_price\n\nggbetweenstats(\n  data = updated_flat_data,\n  x = flat_type,\n  y = resale_price, \n  type = \"p\",\n  mean.ci = TRUE, \n  pairwise.comparisons = TRUE, \n  pairwise.display = \"s\",\n  p.adjust.method = \"fdr\",\n  messages = FALSE\n)\n\n\n\n\nFrom performing the one-way ANOVA test between flat_type and resale_price, the p-value(<0.05) suggests that the mean value of various flat_type is different from one another.\nH0: Mean resale_price values of different flat_type are equal to one another.\nH1: Mean resale_price values of different flat_type are unequal.\n\n\nVisualizing uncertainty with Hypothetical Outcome Plots(HOPs)\n\ndevtools::install_github(\"wilkelab/ungeviz\")\n\n\nlibrary(ungeviz)\nfiltered_sr_flats_data <- filter(updated_flat_data, storey_range %in% c(\"43 TO 45\"))\n\n\nggplot(data = filtered_sr_flats_data, \n       (aes(x = factor(flat_type), y = resale_price))) +\n  geom_point(position = position_jitter(\n    width = 0.05), \n    color = \"#0072B2\", alpha = 1/2) +\n  geom_hpline(data = sampler(25, group = flat_type), color = \"#D55E00\") +\n  theme_bw() + \n  # `.draw` is a generated column indicating the sample draw\n  transition_states(.draw, 1, 3)\n\n\n\n\nTo furthermore analyse the data individually for different, lets find the unique number of different categorical values in the dataset.\n\nunique(updated_flat_data$town)\n\n [1] \"ANG MO KIO\"      \"BEDOK\"           \"BISHAN\"          \"BUKIT BATOK\"    \n [5] \"BUKIT MERAH\"     \"BUKIT PANJANG\"   \"BUKIT TIMAH\"     \"CENTRAL AREA\"   \n [9] \"CHOA CHU KANG\"   \"CLEMENTI\"        \"GEYLANG\"         \"HOUGANG\"        \n[13] \"JURONG EAST\"     \"JURONG WEST\"     \"KALLANG/WHAMPOA\" \"MARINE PARADE\"  \n[17] \"PASIR RIS\"       \"PUNGGOL\"         \"QUEENSTOWN\"      \"SEMBAWANG\"      \n[21] \"SENGKANG\"        \"SERANGOON\"       \"TAMPINES\"        \"TOA PAYOH\"      \n[25] \"WOODLANDS\"       \"YISHUN\"         \n\n\n\nunique(updated_flat_data$flat_model)\n\n [1] \"New Generation\"         \"Improved\"               \"Model A\"               \n [4] \"DBSS\"                   \"Simplified\"             \"Premium Apartment\"     \n [7] \"Standard\"               \"Model A-Maisonette\"     \"Model A2\"              \n[10] \"Type S1\"                \"Type S2\"                \"Premium Apartment Loft\"\n[13] \"Adjoined flat\"          \"Terrace\"                \"3Gen\"                  \n[16] \"Improved-Maisonette\"   \n\n\n\nunique(updated_flat_data$floor_area_sqm)\n\n  [1]  73.0  67.0  68.0  82.0  83.0  75.0  74.0  60.0  81.0  92.0  99.0  93.0\n [13]  98.0 100.0  91.0 106.0  90.0  85.0 119.0 120.0 118.0 125.0 110.0 112.0\n [25]  69.0  59.0  70.0  66.0  65.0  88.0  94.0  95.0  87.0 104.0 103.0 107.0\n [37]  84.0 105.0 108.0 123.0 122.0 121.0 139.0 115.0 133.0 113.0 126.0  64.0\n [49] 116.0 114.0 111.0 130.0  77.0 102.0 117.0 101.0  96.0 149.0  62.0  63.0\n [61]  80.0 132.0  89.0 128.0  97.0 138.0  79.0 109.0 124.0 127.0 134.0 131.0\n [73]  57.0  56.0  61.0  52.0  72.0  58.0 129.0 136.0 140.0  53.0  76.0  86.0\n [85]  71.0 137.0 135.0 150.0  60.3  78.0  54.0 142.0  55.0 159.0 141.0 154.0\n [97]  63.1 144.0 155.0 157.0  51.0 152.0 143.0\n\n\n\n\nOne-way ANOVA flat_type and floor_area_sqm\n\nggbetweenstats(\n  data = updated_flat_data,\n  x = flat_type,\n  y = floor_area_sqm, \n  type = \"p\",\n  mean.ci = TRUE, \n  pairwise.comparisons = TRUE, \n  pairwise.display = \"s\",\n  p.adjust.method = \"fdr\",\n  messages = FALSE\n)\n\n\n\n\nFrom performing the one-way ANOVA test between flat_type and floor_area_sqm, the p-value(<0.05) suggests that the mean value of various flat_type is different from one another.\nH0: Mean floor_area_sqm values of different flat_type are equal to one another.\nH1: Mean floor_area_sqm values of different flat_type are unequal."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex04/Take-Home_Ex04.html",
    "href": "Take-Home_Ex/Take-Home_Ex04/Take-Home_Ex04.html",
    "title": "Take-Home_Ex04",
    "section": "",
    "text": "The objective is to uncover the impact of COVID-19 as well as the global & political dynamic in 2022 on Singapore’s bilateral trade.\nThe primary focus is on the period between January 2020 and December 2022."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex04/Take-Home_Ex04.html#load-the-packages",
    "href": "Take-Home_Ex/Take-Home_Ex04/Take-Home_Ex04.html#load-the-packages",
    "title": "Take-Home_Ex04",
    "section": "Load the packages",
    "text": "Load the packages\nThe required packages are to be loaded for the purpose of visualization.\n\npacman::p_load(scales, viridis, lubridate, ggthemes, gridExtra, tidyverse, readxl, knitr, data.table, readxl, lubridate, stringr, dplyr, gganimate, transformr, patchwork, countrycode)"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex04/Take-Home_Ex04.html#load-the-data",
    "href": "Take-Home_Ex/Take-Home_Ex04/Take-Home_Ex04.html#load-the-data",
    "title": "Take-Home_Ex04",
    "section": "Load the data",
    "text": "Load the data\nRun the following code to load the imported data for continents and countries.\n\nimported_continents <- read_excel(\"data/Merchandise Trade by RegionMarket.xlsx\", \n                          sheet = \"T1\",\n                          range = cell_rows(10:16))%>%\n  select(`Data Series`, contains(c(\"2020\", \"2021\", \"2022\"))) %>%\n  slice(-1)\n\nimported_continents\n\n# A tibble: 5 × 37\n  `Data Series`  2020 …¹ 2020 …² 2020 …³ 2020 …⁴ 2020 …⁵ 2020 …⁶ 2020 …⁷ 2020 …⁸\n  <chr>            <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n1 America (Mill…   4676.   4588.   4870.   4886.   4132    4667.   4686.   4259 \n2 Asia (Million…  28200.  25845.  26128.  27823.  26052.  26767.  24779.  21719.\n3 Europe (Milli…   6087.   6134.   6285.   5317.   5225    5475.   4961.   4629 \n4 Oceania (Mill…    541.   1413.    577.    478.    586.    493.    456.    442.\n5 Africa (Milli…    649.    499.    314.    297.    476.    441.    238.    410.\n# … with 28 more variables: `2020 Apr` <dbl>, `2020 Mar` <dbl>,\n#   `2020 Feb` <dbl>, `2020 Jan` <dbl>, `2021 Dec` <dbl>, `2021 Nov` <dbl>,\n#   `2021 Oct` <dbl>, `2021 Sep` <dbl>, `2021 Aug` <dbl>, `2021 Jul` <dbl>,\n#   `2021 Jun` <dbl>, `2021 May` <dbl>, `2021 Apr` <dbl>, `2021 Mar` <dbl>,\n#   `2021 Feb` <dbl>, `2021 Jan` <dbl>, `2022 Dec` <dbl>, `2022 Nov` <dbl>,\n#   `2022 Oct` <dbl>, `2022 Sep` <dbl>, `2022 Aug` <dbl>, `2022 Jul` <dbl>,\n#   `2022 Jun` <dbl>, `2022 May` <dbl>, `2022 Apr` <dbl>, `2022 Mar` <dbl>, …\n\n\n\nimported_countries <- read_excel(\"data/Merchandise Trade by RegionMarket.xlsx\", \n                          sheet = \"T1\",\n                          range = cell_rows(10:101))%>%\n  select(`Data Series`, contains(c(\"2020\", \"2021\", \"2022\"))) %>%\n  slice(-1:-7)\n\nimported_countries\n\n# A tibble: 84 × 37\n   `Data Series` 2020 …¹ 2020 …² 2020 …³ 2020 …⁴ 2020 …⁵ 2020 …⁶ 2020 …⁷ 2020 …⁸\n   <chr>           <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n 1 Belgium (Tho…  133445  209539   83657   80823   99286  102317   73457   77945\n 2 Denmark (Tho…  143209   45010   43480   70494   44398   95598   41203   65305\n 3 France (Thou… 1141603 1498854 1922407 1167166  922015 1088034  895505  690063\n 4 Germany, Fed…  980296  978208  980882  972416  931876 1061128  978806  892172\n 5 Greece (Thou…   10429   10423   11378   11241   11809   11655   11839   11181\n 6 Ireland (Tho…  250720  252154  187158  112631   94134  104004  111688   93891\n 7 Italy (Thous…  613730  476816  487904  409767  461599  382371  442728  295412\n 8 Luxembourg (…   11891    3758   14577    3471    3479   29389   23619    3436\n 9 Netherlands …  257892  296798  303736  373881  286459  252322  273072  255200\n10 United Kingd…  755324  635420  802840  762179  863043  830637  739542 1104023\n# … with 74 more rows, 28 more variables: `2020 Apr` <dbl>, `2020 Mar` <dbl>,\n#   `2020 Feb` <dbl>, `2020 Jan` <dbl>, `2021 Dec` <dbl>, `2021 Nov` <dbl>,\n#   `2021 Oct` <dbl>, `2021 Sep` <dbl>, `2021 Aug` <dbl>, `2021 Jul` <dbl>,\n#   `2021 Jun` <dbl>, `2021 May` <dbl>, `2021 Apr` <dbl>, `2021 Mar` <dbl>,\n#   `2021 Feb` <dbl>, `2021 Jan` <dbl>, `2022 Dec` <dbl>, `2022 Nov` <dbl>,\n#   `2022 Oct` <dbl>, `2022 Sep` <dbl>, `2022 Aug` <dbl>, `2022 Jul` <dbl>,\n#   `2022 Jun` <dbl>, `2022 May` <dbl>, `2022 Apr` <dbl>, `2022 Mar` <dbl>, …\n\n\nSimilar to the way imported data is imported, import the exported data from the sheet T2.\n\n\nExported Data Code\nexported_continents <- read_excel(\"data/Merchandise Trade by RegionMarket.xlsx\", \n                          sheet = \"T2\",\n                          range = cell_rows(10:16))%>%\n  select(`Data Series`, contains(c(\"2020\", \"2021\", \"2022\"))) %>%\n  slice(-1)\n\nexported_countries <- read_excel(\"data/Merchandise Trade by RegionMarket.xlsx\", \n                          sheet = \"T2\",\n                          range = cell_rows(10:101))%>%\n  select(`Data Series`, contains(c(\"2020\", \"2021\", \"2022\"))) %>%\n  slice(-1:-7)"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex04/Take-Home_Ex04.html#analyze-and-clean-data",
    "href": "Take-Home_Ex/Take-Home_Ex04/Take-Home_Ex04.html#analyze-and-clean-data",
    "title": "Take-Home_Ex04",
    "section": "Analyze and Clean Data",
    "text": "Analyze and Clean Data\nHere are the following observations after scanning through the data,\n\nThe data consists of the merchandise exports and imports by Region/Market monthly in two different worksheets.\nThe data consists of both country and continental merchandise exports and imports amount.\nThe data is inconsistent as the country exports and imports amount are in thousands while the continental exports and imports amount are in millions.\n\nTo clean the data the following steps are followed,\n\nPivot the import and export details of countries and continents,\n\n\nimportCountryDataPivot <- imported_countries %>%\n  pivot_longer(cols = 2:37, names_to = \"yearmonth\", values_to = \"Imports\" )\nimportContinentDataPivot <- imported_continents %>%\n  pivot_longer(cols = 2:37, names_to = \"yearmonth\", values_to = \"Imports\" )\n\nexportCountryDataPivot <- exported_countries %>%\n  pivot_longer(cols = 2:37, names_to = \"yearmonth\", values_to = \"Exports\" )\nexportContinentDataPivot <- exported_continents %>%\n  pivot_longer(cols = 2:37, names_to = \"yearmonth\", values_to = \"Exports\" )\n\ncolnames(importCountryDataPivot) <- c(\"Country\", \"Date\", \"Imports\")\ncolnames(importContinentDataPivot) <- c(\"Continent\", \"Date\", \"Imports\")\n\ncolnames(exportCountryDataPivot) <- c(\"Country\", \"Date\", \"Exports\")\ncolnames(exportContinentDataPivot) <- c(\"Continent\", \"Date\", \"Exports\")\n\n\nTo make the data consistent, convert the country’s merchandise imports and exports into millions.\n\n\nimportCountryDataPivot$Imports <- ifelse(grepl(\"(Thousand Dollars)\", importCountryDataPivot$Country, fixed = TRUE), importCountryDataPivot$Imports/1000, importCountryDataPivot$Imports)\n\nimportContinentDataPivot$Imports <- ifelse(grepl(\"(Thousand Dollars)\", importContinentDataPivot$Continent, fixed = TRUE), importContinentDataPivot$Imports/1000, importContinentDataPivot$Imports)\n\nexportCountryDataPivot$Exports <- ifelse(grepl(\"(Thousand Dollars)\", exportCountryDataPivot$Country, fixed = TRUE), exportCountryDataPivot$Exports/1000, exportCountryDataPivot$Exports)\n\nexportContinentDataPivot$Exports <- ifelse(grepl(\"(Thousand Dollars)\", exportContinentDataPivot$Continent, fixed = TRUE), exportContinentDataPivot$Exports/1000, exportContinentDataPivot$Exports)\n\n\nTo remove the (Thousand Dollars) and (Million Dollars) appended to each row.\n\n\nimportCountryDataPivot$Country<-gsub(\" [(]Thousand Dollars[)]\",\"\",as.character(importCountryDataPivot$Country))\nimportContinentDataPivot$Continent<-gsub(\" [(]Thousand Dollars[)]\",\"\",as.character(importContinentDataPivot$Continent))\n\nexportCountryDataPivot$Country<-gsub(\" [(]Thousand Dollars[)]\",\"\",as.character(exportCountryDataPivot$Country))\nexportContinentDataPivot$Continent<-gsub(\" [(]Thousand Dollars[)]\",\"\",as.character(exportContinentDataPivot$Continent))\n\nimportCountryDataPivot$Country<-gsub(\" [(]Million Dollars[)]\",\"\",as.character(importCountryDataPivot$Country))\nimportContinentDataPivot$Continent<-gsub(\" [(]Million Dollars[)]\",\"\",as.character(importContinentDataPivot$Continent))\n\nexportCountryDataPivot$Country<-gsub(\" [(]Million Dollars[)]\",\"\",as.character(exportCountryDataPivot$Country))\nexportContinentDataPivot$Continent<-gsub(\" [(]Million Dollars[)]\",\"\",as.character(exportContinentDataPivot$Continent))\n\n\nTo cast the yearmonth column into Date type.\n\n\nimportCountryDataPivot$Date <- as.Date(paste(importCountryDataPivot$Date, \"01\"), format = \"%Y %b %d\")\nimportContinentDataPivot$Date <- as.Date(paste(importContinentDataPivot$Date, \"01\"), format = \"%Y %b %d\")\nexportCountryDataPivot$Date <- as.Date(paste(exportCountryDataPivot$Date, \"01\"), format = \"%Y %b %d\")\nexportContinentDataPivot$Date <- as.Date(paste(exportContinentDataPivot$Date, \"01\"), format = \"%Y %b %d\")\n\n\nPivot the countries into the required format for cycleplot.\n\n\nimportCountryDataCyclePivot <- importCountryDataPivot %>%\n  pivot_wider(names_from = \"Country\", values_from = \"Imports\" )\nexportCountryDataCyclePivot <- exportCountryDataPivot %>%\n  pivot_wider(names_from = \"Country\", values_from = \"Exports\" )\n\n\nTo add month and year columns to the data for further use.\n\n\nimportCountryDataCyclePivot$month <- factor(month(importCountryDataCyclePivot$`Date`), \n                    levels=1:12, \n                    labels=month.abb, \n                    ordered=TRUE) \nimportCountryDataCyclePivot$year <- year(ymd(importCountryDataCyclePivot$`Date`))\n\nimportContinentDataPivot$month <- factor(month(importContinentDataPivot$`Date`), \n                    levels=1:12, \n                    labels=month.abb, \n                    ordered=TRUE) \nimportContinentDataPivot$year <- year(ymd(importContinentDataPivot$`Date`))\n\nexportCountryDataCyclePivot$month <- factor(month(exportCountryDataCyclePivot$`Date`), \n                    levels=1:12, \n                    labels=month.abb, \n                    ordered=TRUE) \nexportCountryDataCyclePivot$year <- year(ymd(exportCountryDataCyclePivot$`Date`))\n\nexportContinentDataPivot$month <- factor(month(exportContinentDataPivot$`Date`), \n                    levels=1:12, \n                    labels=month.abb, \n                    ordered=TRUE) \nexportContinentDataPivot$year <- year(ymd(exportContinentDataPivot$`Date`))"
  }
]